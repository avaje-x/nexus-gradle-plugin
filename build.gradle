group = 'org.avaje.incubating'
version = '0.1'

buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath 'com.bmuschko:nexus-gradle-plugin:2.3.1'
    }
}

apply plugin: 'groovy'
//apply plugin: 'maven-publish'
apply plugin: 'com.bmuschko.nexus'
//apply plugin: 'com.jfrog.bintray'

def compatibilityVersion = 1.6
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion


repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
//    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
//        exclude group: 'org.codehaus.groovy'
//    }
}

modifyPom {
    project {
        name 'Plugin to publish to maven nexus'
        description 'Gradle plugin for publishing to nexus repo'
        url 'https://github.com/avaje-x/nexus-gradle-plugin'

        scm {
            url 'https://github.com/avaje-x/nexus-gradle-plugin'
            developerConnection 'scm:git://github.com/avaje-x/nexus-gradle-plugin'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                id 'rbygrave'
                name 'Robin Bygrave'
            }
        }
    }
}

//sourceSets {
//    integrationTest {
//        groovy.srcDir file('src/integTest/groovy')
//        resources.srcDir file('src/integTest/resources')
//        compileClasspath = sourceSets.main.output + configurations.testRuntime
//        runtimeClasspath = output + compileClasspath
//    }
//}

//task integrationTest(type: Test, dependsOn: test) {
//    description = 'Runs the integration tests.'
//    group = 'verification'
//    testClassesDir = sourceSets.integrationTest.output.classesDir
//    classpath = sourceSets.integrationTest.runtimeClasspath
//}

//check.dependsOn integrationTest

//jar {
//    manifest {
//        attributes 'Implementation-Title': 'Gradle Sonatype Nexus plugin',
//                'Implementation-Version': version,
//                'Built-By': System.getProperty('user.name'),
//                'Built-Date': new Date(),
//                'Built-JDK': System.getProperty('java.version'),
//                'Built-Gradle': gradle.gradleVersion
//    }
//}

//idea.project {
//    jdkName = '1.6'
//
//    ipr.withXml { provider ->
//        def node = provider.asNode()
//
//        // Use GIT
//        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
//        vcsConfig.mapping[0].'@vcs' = 'Git'
//
//        // Set Gradle home
//        def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
//        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
//    }
//}
//
//idea.module {
//    testSourceDirs += file('src/integTest/groovy')
//}

//task sourcesJar(type: Jar) {
//    classifier 'sources'
//    from sourceSets.main.allSource
//}
//
//task groovydocJar(type: Jar, dependsOn: groovydoc) {
//    classifier 'groovydoc'
//    from groovydoc.destinationDir
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives sourcesJar
//    archives groovydocJar
//    archives javadocJar
//}
//
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            from components.java
//            artifact sourcesJar
//            artifact groovydocJar
//            artifact javadocJar
//
//            pom.withXml {
//                def root = asNode()
//                root.appendNode('name', 'Gradle Sonatype Nexus plugin')
//                root.appendNode('description', 'Gradle plugin for configuring and upload artifacts to Sonatype Nexus.')
//                root.appendNode('url', 'https://github.com/bmuschko/gradle-nexus-plugin')
//                root.appendNode('inceptionYear', '2012')
//
//                def scm = root.appendNode('scm')
//                scm.appendNode('url', 'https://github.com/bmuschko/gradle-nexus-plugin')
//                scm.appendNode('connection', 'scm:https://bmuschko@github.com/bmuschko/gradle-nexus-plugin.git')
//                scm.appendNode('developerConnection', 'scm:git://github.com/bmuschko/gradle-nexus-plugin.git')
//
//                def license = root.appendNode('licenses').appendNode('license')
//                license.appendNode('name', 'The Apache Software License, Version 2.0')
//                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
//                license.appendNode('distribution', 'repo')
//
//                def developers = root.appendNode('developers')
//                def bmuschko = developers.appendNode('developer')
//                bmuschko.appendNode('id', 'bmuschko')
//                bmuschko.appendNode('name', 'Benjamin Muschko')
//                bmuschko.appendNode('email', 'benjamin.muschko@gmail.com')
//            }
//        }
//    }
//}

//bintray {
//    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : null
//    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : null
//    publications = ['mavenJava']
//
//    pkg {
//        repo = 'gradle-plugins'
//        name = 'com.bmuschko:gradle-nexus-plugin'
//        desc = 'Gradle plugin for configuring and uploading artifacts to Sonatype Nexus.'
//        websiteUrl = "https://github.com/bmuschko/${project.name}"
//        issueTrackerUrl = "https://github.com/bmuschko/${project.name}/issues"
//        vcsUrl = "https://github.com/bmuschko/${project.name}.git"
//        licenses = ['Apache-2.0']
//        labels = ['gradle', 'nexus', 'sonatype', 'binary', 'repository', 'publish', 'upload', 'pom', 'maven']
//        publicDownloadNumbers = true
//
//        version {
//            vcsTag = "v$project.version"
//            attributes = ['gradle-plugin': "com.bmuschko.nexus:${project.group}:${project.name}"]
//
//            gpg {
//                sign = true
//                passphrase = project.hasProperty('gpgPassphrase') ? project.getProperty('gpgPassphrase') : null
//            }
//        }
//    }
//}